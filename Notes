# 🚀 Terraform on AWS - Course Modules, Concepts, and Deep Dive

## 📚 Course Modules

1. **Infrastructure as Code (IaC)**
2. **Terraform Basics**
   - Install Tools on MacOS, LinuxOS, and WindowsOS
   - Terraform Command Basics
   - Terraform Language Syntax
3. **Terraform Settings, Providers and Resources**
4. **Terraform Variables and Datasources**
5. **Terraform Loops, Meta-Arguments and Splat Operators**
6. **AWS VPC 3-Tier Architecture**
7. **AWS EC2 Instances and Security Groups in a VPC**
8. **AWS Classic Load Balancer**
9. **AWS ALB Application Load Balancer**
10. **AWS ALB Context-Path based Routing**
11. **AWS ALB Host-Header based Routing**
12. **AWS ALB HTTP Header and Query String Redirects**
13. **AWS DNS to DB Implementation**
14. **AWS Autoscaling with Launch Configuration**
15. **AWS Autoscaling with Launch Templates**
16. **AWS Network Load Balancer with TCP and TLS**
17. **AWS CloudWatch Alarms for ALB, ASG and CIS**
18. **Develop and Reference Terraform Modules Locally**
19. **Develop Terraform Module from Scratch**
20. **Remote State Storage with AWS S3 and DynamoDB**
21. **Terraform Remote State Datasource**
22. **IaC DevOps using AWS CodePipeline**

---

## ☁️ AWS Services Covered

- AWS VPC Virtual Private Cloud
- AWS NAT Gateways for Outbound Communication
- AWS Public and Private Subnets
- AWS EC2 Instances
- AWS Security Groups
- AWS Classic Load Balancer
- AWS ALB (Application Load Balancer) - Basic
- Context-Path Routing in ALB
- Host-Header Routing in ALB
- Custom HTTP Header Routing in ALB
- Query String Redirects in ALB
- Autoscaling (Launch Configurations & Templates)
- AWS Network Load Balancer
- AWS CloudWatch Alarms
- AWS Certificate Manager (ACM)
- AWS Route53
- AWS CodeBuild & CodePipeline
- AWS RDS Database

---

## 🧱 Terraform Concepts Covered

- Terraform Installation
- Command Basics: `init`, `validate`, `plan`, `apply`
- Language Syntax (Blocks, Arguments)
- **Blocks:**
  - `settings`
  - `provider`
  - `resource`
- Meta-Arguments: `depends_on`, `count`, `for_each`
- Input Variables:
  - Prompted
  - Default
  - Overridden via CLI
  - Using `.tfvars` file
  - Auto `.auto.tfvars`
  - Lists & Maps
  - Sensitive Inputs
- Functions: `file`, `toset`, `tomap`, `keys`
- Output & Local Values
- Data Sources
- Remote Backends (S3 + DynamoDB)
- Provisioners: `file`, `local-exec`, `remote-exec`
- Null Resource
- Public and Local Modules
- Loops:
  - Lists
  - Maps
  - Advanced Map Operations
- Splat Operators:
  - Legacy
  - Latest
- Module Upgrades
- Random Resource Generator

---

## 🔍 Topics Deep Dive

### ✅ 01. Infrastructure as Code (IaC)

---

### 🔹 What Is IaC?

> Infrastructure as Code (IaC) is the practice of managing and provisioning computing infrastructure through machine-readable definition files instead of manual hardware configuration or interactive configuration tools.

- Written as `.tf`, `.yaml`, or `.json` files
- Version-controlled, shareable, and automatable

---

### 🔹 Why Use IaC?

Without IaC:

- Manual clicks in AWS Console
- Inconsistent setups and human errors
- No visibility on changes

With IaC:

- ✅ **Repeatable**: Same setup for dev/staging/prod
- ✅ **Versioned**: Track changes with Git
- ✅ **Auditable**: Know who did what
- ✅ **Collaborative**: Just like app development
- ✅ **Automated**: CI/CD pipeline integration

---

### 🔹 Real-Time Analogy

> Think of baking a cake.

Without a recipe:
- You guess ingredient amounts
- Results vary

With a recipe (IaC):
- Repeatable outcome
- Easy to share and improve

**IaC = Infrastructure Recipe**

---

### 🔹 Where IaC Is Used

- Cloud Infrastructure: AWS, Azure, GCP
- Kubernetes Deployments
- CI/CD Pipelines
- Platform Engineering
- Managing VMs, Load Balancers, DNS, DBs, and more

---

### 🔹 Popular IaC Tools

| Tool             | Description                        |
|------------------|------------------------------------|
| Terraform        | Cloud-agnostic IaC                 |
| AWS CloudFormation | AWS-native IaC                  |
| Pulumi           | Code-based IaC using real languages|
| Ansible          | Provisioning & Configuration Mgmt  |
| Chef / Puppet    | Legacy tools for configuration     |

---

### 🔹 IaC with Terraform (AWS Example)

You want to create:
- A VPC
- An EC2 instance
- A Security Group

Write all in `.tf` files and run:

```bash
terraform init
terraform plan
terraform apply
Terraform will provision infrastructure on AWS automatically.

🔹 IaC Workflow
Write infra code: main.tf, vpc.tf, etc.

Initialize:

bash
Copy
Edit
terraform init
Preview changes:

bash
Copy
Edit
terraform plan
Apply changes:

bash
Copy
Edit
terraform apply
Reuse, reapply, update anytime

Destroy infrastructure:

bash
Copy
Edit
terraform destroy
🧠 Real-Time Use Case
✅ "We need 3 web servers and a load balancer for testing."

With Terraform:

Write once using count

Apply once

Done in minutes

Repeat for any environment
